Index: Data_Classes/Codes_DB.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># =========================================================================== #\n#               -----   Codes_DB.py   -----                                   #\n#          class  for Transactions Codes Database                             #\n# =========================================================================== #\n\nimport sqlite3\n\nfrom Data_Classes.Filesnames_Mngr import Files_Names_Manager\nfrom Common.Common_Functions import *\nfrom Common.Common_Functions import Compact_Descr_String\n# from Chat import Ms_Chat\n\n# ---------------------------------------------------------------------------------\nclass Codes_db(Files_Names_Manager):\n    def __init__(self):\n        super().__init__()\n        # self.Chat  = Ms_Chat\n        self.Dummy = 0\n\n        # ==================================================================================================== #\n        #                                     0      1        2       3     4         5       6        7\n        self._TR_Codes_Table      = []  # TRCode GRcode SPcode  TRdesc StrToSear FullDesc\n        self._TR_Codes_Full       = []  # TRcode GRcode CAcode  TRdesc GRdesc    CAdesc StrToSear FullDesc\n        self._GR_Codes_Table      = []  # GRcode GRdescr  CAcode\n        self._CA_Codes_Table      = []  # CAcode CAdescr\n\n        self._GRdescr_Ordered_List = []\n        self._CA_Codes_Ordered     = []\n\n        self._Multiple_Maching_List = []  # full descriptions matching with the same StrToSearch\n\n\n    # ----------------------   Check the database  codes table   --------------------------------\n    # for each code record to check verify if in the restant code records\n    # exists a record that has a fullDescr that match with the strToSearch to check\n    # -------------------------------------------------------------------------------------------\n    def Check_Codesdatabase(self):\n        self._Multiple_Maching_List = []\n        for Rec_To_Check in self._TR_Codes_Table:\n            StrToCek = Rec_To_Check[iTR_TRserc]\n            for Rec in self._TR_Codes_Table:\n                if Rec == Rec_To_Check:\n                    pass\n                else:\n                    FullDescr = Rec[iTR_TRfullDes]\n                    if StrForSearc_in_Fulldescr(StrToCek, FullDescr):\n                        self._Multiple_Maching_List.append(Rec)\n        return self._Multiple_Maching_List\n    # -------------------------------------------------------------------------------------- #\n    #      public methods invoked outside from  Top_Codes  classes                           #\n    # -------------------------------------------------------------------------------------- #\n    def Load_Codes_Table(self):\n        Result = self._Load_Codes_Tables()\n        if Result != OK:\n            return Result\n        return OK\n\n    def Get_Codes_Table(self):\n        return self._TR_Codes_Table\n\n    def Get_TR_Codes_Table_Len(self):\n        return len(self._TR_Codes_Table)\n\n    def Get_TrDesc_FromCode(self, TRcde):\n        for Rec in self._TR_Codes_Table:\n            if Rec[iTR_TRcode] == TRcde:\n                return Rec[iTR_TRdesc]\n        return -1\n\n    def Get_TrCode_FromDescr(self, Descr):\n        for Rec in self._TR_Codes_Table:\n            if Rec[iTR_TRdesc] == Descr:\n                return Rec[iTR_TRcode]\n        return -1\n\n    def Get_TR_Codes_Full(self, Index):\n        if Index == -1:\n            return self._TR_Codes_Full\n        else:\n            return self._TR_Codes_Full[Index]\n\n    def Get_TR_Codes_Full_FromTRdescr(self, descr):\n        TrCode = self.Get_TrCode_FromDescr(descr)\n        if TrCode == -1:\n            return []\n        return self.Get_TR_Codes_Full(TrCode)\n\n\n    def Get_GR_Codes_Table(self):\n        return self._GR_Codes_Table\n\n    def Get_CA_Codes_Table(self):\n        return self._CA_Codes_Table\n\n    def Get_CA_Codes_Ordered(self):\n        return self._CA_Codes_Ordered\n\n    # ----------------------------------------------------------------------------------------\n    def Get_New_Code(self):\n        Max_Code = 0\n        Tot_Codes = 0\n        for Rec in self._TR_Codes_Table:\n            Tot_Codes += 1\n            if Rec[0] > Max_Code:\n                Max_Code = Rec[0]\n        New_Code = Max_Code + 1\n        return [New_Code, Tot_Codes]\n\n    # ----------------------------------------------------------------------------------------\n    def Get_Last_TRrec(self):\n        Index = -1\n        for TRrecord in self._TR_Codes_Table:\n            self.Dummy = TRrecord\n            Index += 1\n        return self._TR_Codes_Table[Index]\n\n    # ---------------------------------------------------------------------------------------------------\n    @classmethod\n    def Check_Codes_Record_Is_OK(cls, TR_RecToCheck):\n        TR_CodeToCheck  = TR_RecToCheck[iTR_TRcode]\n        TR_strTo_Search = TR_RecToCheck[iTR_TRserc]\n        TR_FullDesc     = TR_RecToCheck[iTR_TRfullDes]\n        GR_CodeToCheck  = TR_RecToCheck[iTR_GRcode]\n        TR_DescToCheck  = TR_RecToCheck[iTR_TRdesc]\n        if TR_FullDesc.find('nRow=') == -1:\n            return 'Full Description NOT OK\\nnRow=  fails'\n        elif TR_CodeToCheck == 0 or GR_CodeToCheck == 0:\n            return 'a TR or GR code is zero'\n        elif len(TR_DescToCheck) < 3:\n            return 'TR description too short'\n        elif len(TR_strTo_Search) < 3:\n            return 'String to search too short'\n        elif TR_strTo_Search == 'Enter a String To Search':\n            return 'Enter a correct string to search'\n        elif TR_DescToCheck == 'Set Transaction Description':\n            return 'Enter a correct Transaction description'\n        # elif not self.ChecK_StrToSearch(TR_strTo_Search, TR_FullDesc):\n        # elif StrForSearc_in_Fulldescr(TR_strTo_Search, TR_FullDesc):\n        #     return 'String To Search:\\n' + TR_strTo_Search + '\\ndoes not match with Full Desription:\\n' + TR_FullDesc\n        Result = StrForSearc_in_Fulldescr(TR_strTo_Search, TR_FullDesc)\n        if not Result:\n            return 'String To Search:\\n' + TR_strTo_Search + '\\ndoes not match with Full Desription:\\n' + TR_FullDesc\n        return OK\n\n\n    # -------------------------------------------------------------------------------------- #\n    #      private  _methods invoked only inside  the data classes  chain                    #\n    # -------------------------------------------------------------------------------------- #\n    def _Load_Codes_Tables(self):\n        self._TR_Codes_Table       = []  # TRCode GRcode   SPcode   TRdesc  StrToSear  FullDesc\n        self._GR_Codes_Table       = []  # GRcode GRdescr  CAcode\n        self._CA_Codes_Table       = []  # CAcode CAdescr\n\n        self.Tree_Codes_View_List         = []\n        self.Tree_Codes_View_List_Ordered = []\n\n        self.GR_Codes_Ordered     = []\n        self._CA_Codes_Ordered     = []\n\n        try:\n            TestConnect = sqlite3.connect(self._Codes_DB_Filename)\n            pass\n        except:\n            return 'Please mount data drive'\n\n        connect = sqlite3.connect(self._Codes_DB_Filename)   # self.Files_Mngr.Codes_DB_Filename)\n        cursor = connect.cursor()\n        try:\n            cursor.execute(\"SELECT * FROM TRANSACT_CODES\")\n            self._TR_Codes_Table = cursor.fetchall()\n        except:\n            connect.close()\n            return 'Codes databaseERROR'\n        try:\n            cursor.execute(\"SELECT * FROM GROUP_CODES\")\n            self._GR_Codes_Table = cursor.fetchall()\n        except:\n            connect.close()\n            return 'Groups table ERROR'\n        try:\n            cursor.execute(\"SELECT * FROM CATEGORY_CODES\")\n            self._CA_Codes_Table = cursor.fetchall()\n        except:\n            connect.close()\n            return 'Categories table ERROR'\n        connect.close()\n\n        if not self._TR_Codes_Table or not self._GR_Codes_Table or not self._CA_Codes_Table:\n            return 'Codes tables EMPTY'\n\n        # Create the TR_Code_Table with TRcode, TRdrsc , GRcode as in Codes_DB_yyyy-mm-dd.db\n        # then update GRdesc, CAcode, CAdesc as in GR_Table and in CA_Table\n\n        Index = -1\n        self._TR_Codes_Full = []\n        for Rec in self._TR_Codes_Table:\n            Index += 1\n            TRlist = list(Rec)\n            TRcode = Rec[iTR_TRcode]\n            TRdesc = Rec[iTR_TRdesc]\n            GRcode = Rec[iTR_GRcode]\n\n            GRrec = self._GR_Codes_Table[GRcode]\n            GRdesc = GRrec[iGR_GRdesc]\n            CAcode = self._Get_CA_Code_From_GR_Code(GRcode)\n\n            CArec  = self._CA_Codes_Table[CAcode]\n            CAdesc = CArec[iCA_CAdesc]\n\n            TRlist[iTR_CAcode] = CAcode\n            self._TR_Codes_Table[Index] = TRlist\n\n            TR_Cod_Full = [ TRcode, GRcode, CAcode,\n                            TRdesc, GRdesc, CAdesc,\n                            TRlist[iTR_TRserc], TRlist[iTR_TRfullDes] ]\n            self._TR_Codes_Full.append(TR_Cod_Full)\n        self._Set_TR_View_List()\n        self._GR_CA_Lists_Order()\n        return OK\n\n    # -----------------------------------------------------------------------\n    def _GR_CA_Lists_Order(self):\n        GR_Codes_List_Copy    = self._GR_Codes_Table.copy()\n        self.GR_Codes_Ordered = List_Order(GR_Codes_List_Copy, iGR_GRdesc)\n        CA_Codes_Table_Copy   = self._CA_Codes_Table.copy()\n        self._CA_Codes_Ordered = List_Order(CA_Codes_Table_Copy, iCA_CAdesc)\n\n    # -------------------------------------------------------------------------\n    def _Set_TR_View_List(self):\n        #  TRcode  TRDesc    GRdesc    CAdesc   StrToSear\n        self.Tree_Codes_View_List = []\n        for Rec in self._TR_Codes_Table:\n            #     0       1         2        3         4\n            #  TRcode  TRDesc    GRdesc    CAdesc   StrToSear\n            TRcode = Rec[iTR_TRcode]\n            GRcode = Rec[iTR_GRcode]\n            GRrec  = self._GR_Codes_Table[GRcode]\n            GRdesc = GRrec[iGR_GRdesc]\n            CAcode = GRrec[iGR_CAcode]\n            CAdesc = self._Get_CA_Descr(CAcode)\n            List_View_Codes = [TRcode,              # 0\n                               Rec[iTR_TRdesc],     # 1 ----------------------------------|\n                               GRdesc,              # 2                                   |\n                               CAdesc,              # 3                                   |\n                               Rec[iTR_TRserc]]     # 4                                   |\n            self.Tree_Codes_View_List.append(List_View_Codes)              #              |\n            self.Tree_Codes_View_List_Ordered.append(List_View_Codes)      #              !\n        self.Tree_Codes_View_List_Ordered = List_Order(self.Tree_Codes_View_List_Ordered, 1)\n\n        self._GRdescr_Ordered_List = []\n        for Rec in self._GR_Codes_Table:\n            self._GRdescr_Ordered_List.append(Rec[iGR_GRdesc])\n        self._GRdescr_Ordered_List.sort()\n\n        self.CAdescr_Ordered = []\n        for Rec in self._CA_Codes_Table:\n            self.CAdescr_Ordered.append(Rec[iCA_CAdesc])\n        self.CAdescr_Ordered.sort()\n\n    # ----------  delete the las transaction codes record ------------------------\n    def Delete_Last_TR_Code(self, Last_Code):\n        Connect   = sqlite3.connect(self._Codes_DB_Filename)  # self.Files_Mngr.Codes_DB_Filename)\n        Cursor    = Connect.cursor()\n        try:\n            Cursor.execute(\"DELETE FROM TRANSACT_CODES WHERE TR_Code==?\", (Last_Code,))\n            Connect.commit()\n            Connect.close()\n            return OK\n        except:\n            Connect.close()\n            errMessage = 'ERROR on DELETING\\nlast code record  '\n            errMessage += str(Last_Code)\n            return errMessage\n\n    # -----------------------------------------------------------------------------------------------------------------\n    def Add_TR_Record(self, Record):\n        Connect = sqlite3.connect(self._Codes_DB_Filename)\n        cursor  = Connect.cursor()\n        TR      = Record[iTR_TRcode]\n        GR      = Record[iTR_GRcode]\n        CA      = self._Get_CA_Code_From_GR_Code(iGR_CAcode)\n        Desc         = Record[iTR_TRdesc]\n        StrToSearch  = Compact_Descr_String(Record[iTR_TRserc])\n        Full_Descrip = Record[iTR_TRfullDes]\n        try:\n            cursor.execute(\"\"\"\n                     INSERT INTO TRANSACT_CODES (TR_Code, GR_Code, SP_Code, TR_Descr, Str_To_Search, Str_Full_Descrip)\n                             VALUES (?, ?, ?, ?, ?, ?)\"\"\", (TR, GR, CA, Desc, StrToSearch, Full_Descrip))\n            Connect.commit()\n            Connect.close()\n            return OK\n        except:\n            Connect.close()\n            return 'ERROR on Codes database:\\for record INSERT'\n    # --------------   update a codes record on data base  --------------------------------\n    def Update_DB_TR_Codes(self, Record):\n        Connect  = sqlite3.connect(self._Codes_DB_Filename)   # self.Files_Mngr.Codes_DB_Filename)\n        Cursor   = Connect.cursor()\n        TR   = Record[iTR_TRcode]\n        GR   = Record[iTR_GRcode]\n        CA   = Record[iTR_CAcode]\n        Desc = Record[iTR_TRdesc]\n        StrToSearch  = Compact_Descr_String(Record[iTR_TRserc])\n        Full_Descrip = Record[iTR_TRfullDes]\n\n        sql = \"UPDATE TRANSACT_CODES SET GR_Code=?, SP_Code=?, TR_Descr=?, Str_To_Search=?, Str_Full_Descrip=? WHERE TR_Code==?\"\n        sql_data = (GR, CA, Desc, StrToSearch, Full_Descrip, TR)\n        try:\n            Cursor.execute(sql, sql_data)\n            Connect.commit()\n            Connect.close()\n            return OK\n        except:\n            Connect.close()\n            return 'ERROR on Codes Database\\nTR Record UPDATE'\n\n    # --------------   update Group codes record on data base  --------------------------------------------------------\n    def Update_GR_CA_Rec(self, List):\n        Connect  = sqlite3.connect(self._Codes_DB_Filename)  # self.Files_Mngr.Codes_DB_Filename)\n        Cursor   = Connect.cursor()\n        GRcode   = List[0]\n        GRdesc   = List[1]\n        CAcode   = List[2]\n\n        sql = \"UPDATE GROUP_CODES SET GR_Code=?, GR_Descr=?, CA_Code=? WHERE GR_Code==?\"\n        sql_data = (GRcode, GRdesc, CAcode, GRcode)\n        try:\n            Cursor.execute(sql, sql_data)\n            Connect.commit()\n            Connect.close()\n            return self._Load_Codes_Tables()\n        except:\n            Connect.close()\n            return 'ERROR on Codes Database\\nGR Record UPDATE'\n\n    # -----------------------------------------------------------------------------------------------------------------\n    def Check_If_Code_Exist(self, TRcode):\n        for Rec in self._TR_Codes_Table:\n            if Rec[iTR_TRcode] == TRcode:\n                return True\n        return False\n\n    # -----------------------------------------------------------------------------------------------------------------\n    def _Get_CA_Code_From_GR_Code(self, GR_Code):\n        for Rec in self._GR_Codes_Table:\n            if Rec[iGR_Grcode] == GR_Code:\n                return Rec[iGR_CAcode]\n        return 0\n\n    def _Get_CA_Descr(self, CA_Code):\n        for Rec in self._CA_Codes_Table:\n            if Rec[iCA_CAcode] == CA_Code:\n                return Rec[iCA_CAdesc]\n        return ''\n\n    # -----------------------------------------------------------------------------------------------------------------\n    def Get_GR_CA_desc_From_TRdesc(self, TRDesc):\n        GRdesc = ''\n        CAdesc = ''\n        for Code_Rec in self._TR_Codes_Table:\n            if Code_Rec[iTR_TRdesc] == TRDesc:\n                Code_GR = Code_Rec[iTR_GRcode]\n                for GrRec in self._GR_Codes_Table:\n                    if GrRec[iGR_Grcode] == Code_GR:\n                        GRdesc = GrRec[iGR_GRdesc]\n                        CAcode = GrRec[iGR_CAcode]\n                        for CArec in self._CA_Codes_Table:\n                            if CArec[iCA_CAcode] == CAcode:\n                                CAdesc = CArec[iCA_CAdesc]\n                                break\n        return [GRdesc, CAdesc]\n\n    # -----------------------------------------------------------------------------------------------------------------\n    def Get_TR_GR_CA_desc_From_TRcode(self, TRcode):\n        TRdesc = ''\n        GRdesc = ''\n        CAdesc = ''\n        for Code_Rec in self._TR_Codes_Table:\n            if Code_Rec[iTR_TRcode] == TRcode:\n                TRdesc = Code_Rec[iTR_TRdesc]\n                Code_GR = Code_Rec[iTR_GRcode]\n                for GrRec in self._GR_Codes_Table:\n                    if GrRec[iGR_Grcode] == Code_GR:\n                        GRdesc = GrRec[iGR_GRdesc]\n                        CAcode = GrRec[iGR_CAcode]\n                        for CArec in self._CA_Codes_Table:\n                            if CArec[iCA_CAcode] == CAcode:\n                                CAdesc = CArec[iCA_CAdesc]\n                                break\n        return [TRdesc, GRdesc, CAdesc]\n    # ---------------------------------------------------------------------------------------------\n    def _Find_StrToSearc_InFullDesc(self, Row):  # nRow Contab Valuta   Full_Desc ....\n        Full_Desc   = Row[iRow_Descr1]\n        nFound      = 0\n        Found_List  = []\n        for TRrecord in self._TR_Codes_Table:\n            StrToSearc = TRrecord[iTR_TRserc]\n\n            # if self.ChecK_StrToSearch(StrToSearc, Full_Desc):\n            if StrForSearc_in_Fulldescr(StrToSearc, Full_Desc):\n                nFound += 1\n                Found_List.append(TRrecord)\n\n        if nFound == 1:\n            return [OK, Found_List[0]]\n        elif nFound == 0:\n            return [NOK, []]\n        else:\n            strRec_Found = '\\n'\n            for Rec in Found_List:\n                strRec_Found += '\\n' + Rec[iTR_TRserc] + '\\n' + Rec[iTR_TRfullDes]\n                pass\n            ErrMsg  = 'ERROR multiple machting for FullDesc in Row:\\n\\n'\n            ErrMsg += str(Row[iRow_nRow]) + '  ' + str(Row[iRow_Contab]) + '  '\n            ErrMsg += str(Row[iRow_Valuta]) + '\\n' + str(Row[iRow_Descr1])\n            ErrMsg += '\\n\\nWith Transaction codes:\\n'\n            ErrMsg += str(Found_List[0][0]) + '   ' + str(Found_List[0][3]) +'\\n'\n            ErrMsg += str(Found_List[1][0]) + '   ' + str(Found_List[1][3]) + '\\n'\n            return [NOK, ErrMsg]\n# ==============================================================================================================\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Data_Classes/Codes_DB.py b/Data_Classes/Codes_DB.py
--- a/Data_Classes/Codes_DB.py	(revision 8899f86abb10bbebb54f800d4b4495313f6f9ed2)
+++ b/Data_Classes/Codes_DB.py	(date 1725807567051)
@@ -8,7 +8,7 @@
 from Data_Classes.Filesnames_Mngr import Files_Names_Manager
 from Common.Common_Functions import *
 from Common.Common_Functions import Compact_Descr_String
-# from Chat import Ms_Chat
+from Chat import Ms_Chat
 
 # ---------------------------------------------------------------------------------
 class Codes_db(Files_Names_Manager):
Index: Data_Classes/Xlsx_Manager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># ==================================================================================== #\n#               -----   xlsx_Mngr.py   -----                                           #\n#              class  for  xlsx file managiging                                        #\n# ==================================================================================== #\n\nfrom Data_Classes.Codes_DB import *\nfrom openpyxl import load_workbook\nfrom Common.Common_Functions import *\nfrom datetime import datetime\n\nclass Xlsx_Manager(Codes_db):\n    def __init__(self):\n        super().__init__()\n\n        self._Tot_RowsList  = [0, 0, 0]\n        self._Tot_OK        = 0\n        self._Tot_Rows = 0\n        self._Tot_NOK  = 0\n\n        # the lists for xlsx file   -----------------------------------------\n        self.Contab = None                       # the rows of xls file\n        self.Valuta = None\n        self.Des1   = None\n        self.Accr   = None\n        self.Addeb  = None\n        self.Des2   = None\n\n        #                                     A      B      C      D      E     F\n        self._XLSX_Rows_From_Sheet  = []  # Contab Valuta Descr1 Accred Addeb Descr2\n        self.XLSX_Rows_Desc_Compact = []\n        self.Xlsx_Rows_NOK_List     = []\n        #\n        self._With_Code_Tree_List   = []  # nRow Contabile Valuta TRdesc Accred Addeb TRcode\n        self._Wihtout_Code_Tree_List= []  # nRow Valuta Descr\n\n\n    # -----------------------------------------------------------------------------------\n\n\n    # ----------------------------------------------------------------------------------- #\n    #            ----------------      public   methods   -----------------               #\n    # ----------------------------------------------------------------------------------- #\n    def Get_WithCodeList(self):\n        return self._With_Code_Tree_List\n\n    def Get_WithoutCodeList(self):\n        return self._Wihtout_Code_Tree_List\n\n    def XLSX_Rows_From_Sheet(self):\n        return self._XLSX_Rows_From_Sheet\n\n    def Xlsx_Conto_Year_Month_Setup(self, Action):\n        # FIDEU_2024_01.xlsx\n        if not Action:\n            self._Xlsx_Conto = None\n            self._Xlsx_Year  = None\n            self._Xlsx_Month = None\n        else:\n            # Here Codes tables  are OK and the xlsx_finame too\n            FullFilename = self.Get_Txt_Member(Ix_Xlsx_File)\n            if FullFilename != UNKNOWN:\n                filename = Get_File_Name(FullFilename)\n                self._Xlsx_Conto = filename[0:5]\n                self._Xlsx_Year  = int(filename[6:10])\n                self._Xlsx_Month = int(filename[11:13])\n\n    # -----------------------------------------------------------------------------------\n    def Transact_Year_Setup(self, Action):\n        # Transact_2023.db\n        if not Action:\n            self._Transact_Year = None\n        else:\n            # Here Codes tables  are OK and the xlsx_finame too\n            FullFilename = self.Get_Txt_Member(Ix_Transact_File)\n            if FullFilename != UNKNOWN:\n                filename = Get_File_Name(FullFilename)\n                self._Transact_Year  = int(filename[9:13])\n\n    # -----------------------------------------------------------------------------------------\n    def Load_Xlsx_Lists(self):\n        self.Chat.Set_Start_Time()\n        self._Tot_OK                 = 0\n        self._XLSX_Rows_From_Sheet   = []  # nRow Contab Valuta  Descr1  Accred Addeb Descr2\n        self.XLSX_Rows_Desc_Compact  = []\n        self._With_Code_Tree_List     = []  # nRow Contab Valuta TRcode TRdesc  Accred  Addeb\n        self._Wihtout_Code_Tree_List  = []  # nRow Valuta  Descr\n\n        Result = self._Get_XLS_Rows_From_Sheet()     # get rows from sheet\n        if Result != OK:\n            return Result\n        Result = self._Create_Xlsx_Tree_Rows_List()   # build lists for trees\n        if Result != OK:\n            return Result\n        #                    [Ix__Tot_OK,   Ix_Tot_WithCode,    Ix_Tot_Without_Code]\n        self._Tot_RowsList = [self._Tot_OK, len(self._With_Code_Tree_List), len(self._Wihtout_Code_Tree_List)]\n        return OK\n\n    def Get_Total_Rows(self):\n        return self._Tot_RowsList\n\n    # ----------------------  Set tree rows list   ---------------------------------------  #\n    def _Create_Xlsx_Tree_Rows_List(self):\n        self.iYear_List             = []\n        self._Wihtout_Code_Tree_List = []\n        self._With_Code_Tree_List    = []\n        Tot_Rows_WithCode           = 0\n        Tot_Rows_WithoutCode        = 0\n        for Row in self._XLSX_Rows_Desc_Compact:\n            Row_Without_Code = []\n            Row_With_Code    = []\n            Full_Desc        = self.Description_Select(Row[iRow_Descr1], Row[iRow_Descr2])\n            Row[iRow_Descr1] = Full_Desc\n\n            Result = self._Find_StrToSearc_InFullDesc(Row)\n            if Result[0] == NOK:\n                if not Result[1]:\n                    Tot_Rows_WithoutCode += 1\n                    Row_Without_Code.append(Row[iRow_nRow])       # nRow\n                    Row_Without_Code.append(Row[iRow_Valuta])     # Valuta\n                    Row_Without_Code.append(Full_Desc)            # Full_Desc\n                    self._Wihtout_Code_Tree_List.append(Row_Without_Code)\n                else:\n                    self._Wihtout_Code_Tree_List = []\n                    self._With_Code_Tree_List = []\n                    self._Tot_OK   = 0\n                    self._Tot_Rows = 0\n                    return Result[1]\n\n            else:\n                Rec_Found = Result[1]\n                Tot_Rows_WithCode += 1\n                Row_With_Code.append(int(Row[iRow_nRow]))    # nRow\n                Row_With_Code.append(Row[iRow_Contab])       # Contabile\n                Row_With_Code.append(Row[iRow_Valuta])       # Valuta\n                Row_With_Code.append(Rec_Found[iTR_TRdesc])  # TRdesc\n                Row_With_Code.append(Row[iRow_Accr])         # Accred\n                Row_With_Code.append(Row[iRow_Addeb])        # Addeb\n                Row_With_Code.append(Rec_Found[iTR_TRcode])  # TRcode\n                Row_With_Code.append('  ')                   # Space\n                self._With_Code_Tree_List.append(Row_With_Code)\n        return OK\n\n    # -------------------------------------  Get rows from sheet ----------------------------\n    def _Get_XLS_Rows_From_Sheet(self):\n        self.XLSX_Rows_From_Sheet   = []\n        self._XLSX_Rows_Desc_Compact = []\n        self.Xlsx_Rows_NOK_List     = []\n        self.iYear_List = []\n        self._Tot_OK  = 0\n        self._Tot_NOK = 0\n        self._Get_Work_Sheet_Rows()\n\n        if self._Tot_Rows <= 1:\n            return 'No rows on the sheet'\n\n        for nRow in range(1, self._Tot_Rows+1):\n            self._Get_xlsx_Row(nRow)\n            Des1Comp = Compact_Descr_String(self.Des1)\n            Des2Comp = Compact_Descr_String(self.Des2)\n\n            XLS_Row_List    = [int(nRow), self.Contab, self.Valuta,       # as it is in File\n                              self.Des1,  self.Accr,   self.Addeb, self.Des2]\n            XLS_Row_Compact = [int(nRow), self.Contab, self.Valuta,       # Desc1 & Desc2  compacted\n                              Des1Comp,   self.Accr,   self.Addeb, Des2Comp]\n\n            Checked_Row_List = self._Check_Values(XLS_Row_Compact)\n            if not Checked_Row_List:\n                self._Tot_NOK += 1\n                self.Xlsx_Rows_NOK_List.append(XLS_Row_List)\n            else:\n                self._Tot_OK += 1\n                self._XLSX_Rows_Desc_Compact.append(Checked_Row_List)    # Descriptions compacted\n                Data_Contab = Checked_Row_List[iRow_Contab]\n                Data_Valuta = Checked_Row_List[iRow_Valuta]\n                myRow = []\n                Item = -1\n                for Val in XLS_Row_List:\n                    Item += 1\n                    if Item == iRow_Contab:\n                        myRow.append(Data_Contab)\n                    elif Item == iRow_Valuta:\n                        myRow.append(Data_Valuta)\n                        iYear = int(Data_Valuta[0:4])\n                        if iYear in self.iYear_List or len(self.iYear_List) >= 2:\n                            pass\n                        else:\n                            self.iYear_List.append(iYear)\n                    else:\n                        myRow.append(Val)\n                self.XLSX_Rows_From_Sheet.append(myRow)          # Descripritions as in Sheet, Date is str\n        if self._Tot_OK == 0:\n            return 'Corrects rows not found'\n        if self._Xlsx_Conto == FLASH or self._Xlsx_Conto == AMBRA or self._Xlsx_Conto == POSTA:\n            self._Adjust_Xlsx_Rows_ForFLASH()   # adjust rows as in FLASH or in AMBRA\n        elif self._Xlsx_Conto == POSTA:\n            pass                                # \"\"\"     \"   \"  \"  POSTA\n        else:\n            pass                                # NOT identified leave as FIDEU\n        # -------------\n        if not self._XLSX_Rows_Desc_Compact:\n            return 'xlsx file contains any row with correct data'\n        else:\n            return OK\n\n    # --------------------------------------------------------------------------------------------\n    # List_For_XLSX_Row_Control = [\n    # [iRow_nRow,   INTEGER],\n    # [iRow_Contab, DATE],    [iRow_Valuta, DATE],   [iRow_Descr1, STRING],\n    # [iRow_Accr,   NUMERIC], [iRow_Addeb, NUMERIC], [iRow_Descr2, STRING]]\n    def _Check_Values(self, XLS_Row_List):\n        XLS_Row_List_Checked = []\n        for Item_ToCheck in List_For_XLSX_Row_Control:\n            Value = XLS_Row_List[Item_ToCheck[0]]\n            Type = Item_ToCheck[1]\n            ItemChecked = self._Check_Val(Value, Type)\n            if ItemChecked is None:\n                return []\n            else:\n                XLS_Row_List_Checked.append(ItemChecked)\n        return XLS_Row_List_Checked  # as in Xlsx Rows\n                                     # XLS_Row_List : nRow    Contab    Valuta    Descr1   Accred   Addeb   Descr2\n    # -----------------------------------------------------------------------------------\n    def _Check_Val(self, Item, Type):\n        # List_For_XLSX_Row_Control = [\n        # [iRow_nRow, INTEGER],\n        # [iRow_Contab, DATE],  [iRow_Valuta, DATE],   [iRow_Descr1, STRING],\n        # [iRow_Accr, NUMERIC], [iRow_Addeb, NUMERIC], [iRow_Descr2, STRING]  ]\n        ItemType  = type(Item)\n        if Type == STRING:            #   ---  String   -----  (Descriptions)\n            if ItemType is str:\n                return Item\n            else:\n                return ' '\n        elif Type == INTEGER:         #   ---  Integer  -----   (Row Id number)\n            if ItemType is int:\n                return Item\n            if ItemType is None:\n                return 0\n        elif Type == NUMERIC:         #   ---  Numeric  -----  (Accred  Addeb)\n            if ItemType is float:\n                if not Item:\n                    return ' '\n                return Item\n            elif ItemType is int:\n                if Item == 0:\n                    return ' '\n                return float(Item)\n            # if ItemType is None:\n            # return ' '\n            return ' '\n        elif Type == DATE:            #   ---  Date    -----\n            Ckd_Date = self._Verify_Date(Item)\n            if Ckd_Date:\n                return Ckd_Date\n            else:\n                return None\n\n    # -----------------------------------------------------------------------------------\n    def _Get_xlsx_Row(self, nRow):\n        if self._Xlsx_Conto == FIDEU:                                # Get columns for FIDEU\n            self.Contab = self._Work_Sheet['A' + str(nRow)].value\n            self.Valuta = self._Work_Sheet['B' + str(nRow)].value\n            self.Des1   = self._Work_Sheet['C' + str(nRow)].value\n            self.Accr   = self._Work_Sheet['D' + str(nRow)].value\n            self.Addeb  = self._Work_Sheet['E' + str(nRow)].value\n            self.Des2   = self._Work_Sheet['F' + str(nRow)].value\n\n            # self.Accr  = Float_ToString_Setup(Accr)\n            # self.Addeb = Float_ToString_Setup(Addeb)\n\n        elif self._Xlsx_Conto == FLASH or self._Xlsx_Conto == AMBRA:  # Get columns for Flash/AMBRA\n            self.Contab = self._Work_Sheet['A' + str(nRow)].value\n            self.Valuta = self._Work_Sheet['B' + str(nRow)].value\n            self.Des1   = self._Work_Sheet['C' + str(nRow)].value\n            self.Accr   = self._Work_Sheet['E' + str(nRow)].value\n            self.Addeb  = self._Work_Sheet['G' + str(nRow)].value\n            self.Des2   = ''\n            if type(self.Addeb) is float or type(self.Addeb) is int:\n                self.Addeb  = -self.Addeb\n            typeContab = type(self.Contab)\n            typeValuta = type(self.Valuta)\n            if typeContab is datetime and typeValuta is datetime:\n                pass\n            elif typeContab is datetime:\n                self.Valuta = self.Contab\n            elif typeValuta is datetime:\n                self.Contab = self.Valuta\n\n        elif self._Xlsx_Conto == POSTA:                              # Get columns for POSTA\n            self.Contab = self._Work_Sheet['A' + str(nRow)].value\n            self.Valuta = self._Work_Sheet['B' + str(nRow)].value\n            self.Des1   = ''  #self.Work_Sheet['C' + str(nRow)].value\n            self.Accr   = self._Work_Sheet['D' + str(nRow)].value\n            self.Addeb  = self._Work_Sheet['C' + str(nRow)].value\n            self.Des2   = self._Work_Sheet['E' + str(nRow)].value\n            if type(self.Addeb) is float or type(self.Addeb) is int:\n                self.Addeb  = -self.Addeb\n            typeContab = type(self.Contab)\n            typeValuta = type(self.Valuta)\n            if typeContab is datetime and typeValuta is datetime:\n                pass\n            elif typeContab is datetime:\n                self.Valuta = self.Contab\n            elif typeValuta is datetime:\n                self.Contab = self.Valuta\n\n        elif self._Xlsx_Conto == AMBRA:                              # Get columns for AMBRA\n            pass\n\n    # ---------------------------------------------------------------\n    def _Adjust_Xlsx_Rows_ForFLASH(self):\n        Copy1 = self.XLSX_Rows_From_Sheet.copy()\n        self.XLSX_Rows_From_Sheet = []\n        Copy2 = self._XLSX_Rows_Desc_Compact\n        self._XLSX_Rows_Desc_Compact = []\n        Index = self._Tot_OK -1\n        for j in range(0, self._Tot_OK):\n            Row1 = Copy1[Index]\n            self.XLSX_Rows_From_Sheet.append(Row1)\n            Row2 = Copy2[Index]\n            self._XLSX_Rows_Desc_Compact.append(Row2)\n            Index -= 1\n\n    # --------------------------------------------------------------------------------- #\n    #  Workbook is the container of all Worksheets                                      #\n    #  while the Worksheet is the container of Data of one Sheet                        #\n    # --------------------------------------------------------------------------------- #\n    def _Get_Work_Sheet_Rows(self):\n        XlsName          = self._Xlsx_Filename\n        Work_Book        = load_workbook(XlsName)\n        self.SheetName   = Work_Book.sheetnames[0]   # always the first sheet\n        self.Update_Txt_File(self.SheetName, Ix_Sheet_Name)\n        self._Work_Sheet = Work_Book.get_sheet_by_name(self.SheetName)\n        self._Tot_Rows    = self._Work_Sheet.max_row\n\n    # -----------------------------------------------------------------------------------\n    @classmethod\n    def _Verify_Date(cls, DateToCheck):\n        Type = type(DateToCheck)\n        if Type is datetime:\n            strDate = str(DateToCheck)\n            myDate  = strDate[:10]\n            return myDate\n            # return DateToCheck\n        DateTemplate = 'DD?MM?YYYY'\n        if Type is not str:\n            return []\n        if len(DateToCheck) != 10:\n            return []\n        for i in range(0, 10):\n            if DateTemplate[i] == '?':\n                pass\n            else:\n                if not DateToCheck[i].isdecimal():\n                    return []\n        dateobject = datetime.strptime(DateToCheck, '%d/%m/%Y').date()\n        return dateobject\n\n    # -----------------------------------------------------------------------------------\n    def Description_Select(self, Desc1, Desc2):\n        self.Dummy = 1\n        Typ1 = type(Desc1)\n        Typ2 = type(Desc2)\n        Len1  = 0\n        Len2  = 0\n        if Typ1 is str:\n            Len1 = len(Desc1)\n        if Typ2 is str:\n            Len2 = len(Desc2)\n        if not Len1 and not Len2:\n            return ''\n        if Len1 > Len2:\n            return Desc1\n        else:\n            return Desc2\n\n    # ------------------------------------------------------------------------------------\n    def Check_The_Row(self, FullDesc, TRcode):\n        for Desc in self.XLSX_Rows_From_Sheet:\n            if Desc[iRow_nRow] == 96:\n                pass\n                for Rec in self._TR_Codes_Table:\n                    if Rec[iTR_TRcode] == TRcode:\n                        PRINT(FullDesc+ '   Record: ' + Rec)\n                pass\n# =======================================================================================\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Data_Classes/Xlsx_Manager.py b/Data_Classes/Xlsx_Manager.py
--- a/Data_Classes/Xlsx_Manager.py	(revision 8899f86abb10bbebb54f800d4b4495313f6f9ed2)
+++ b/Data_Classes/Xlsx_Manager.py	(date 1725807567060)
@@ -3,6 +3,7 @@
 #              class  for  xlsx file managiging                                        #
 # ==================================================================================== #
 
+
 from Data_Classes.Codes_DB import *
 from openpyxl import load_workbook
 from Common.Common_Functions import *
